{"ast":null,"code":"'use strict';\n\nvar extend = require('xtend');\n\nvar fuzzy = require('fuzzy');\n\nvar List = require('./list');\n\nvar Suggestions = function (el, data, options) {\n  options = options || {};\n  this.options = extend({\n    minLength: 2,\n    limit: 5,\n    filter: true,\n    hideOnBlur: true\n  }, options);\n  this.el = el;\n  this.data = data || [];\n  this.list = new List(this);\n  this.query = '';\n  this.selected = null;\n  this.list.draw();\n  this.el.addEventListener('keyup', function (e) {\n    this.handleKeyUp(e.keyCode);\n  }.bind(this), false);\n  this.el.addEventListener('keydown', function (e) {\n    this.handleKeyDown(e);\n  }.bind(this));\n  this.el.addEventListener('focus', function () {\n    this.handleFocus();\n  }.bind(this));\n  this.el.addEventListener('blur', function () {\n    this.handleBlur();\n  }.bind(this));\n  this.el.addEventListener('paste', function (e) {\n    this.handlePaste(e);\n  }.bind(this)); // use user-provided render function if given, otherwise just use the default\n\n  this.render = this.options.render ? this.options.render.bind(this) : this.render.bind(this);\n  this.getItemValue = this.options.getItemValue ? this.options.getItemValue.bind(this) : this.getItemValue.bind(this);\n  return this;\n};\n\nSuggestions.prototype.handleKeyUp = function (keyCode) {\n  // 40 - DOWN\n  // 38 - UP\n  // 27 - ESC\n  // 13 - ENTER\n  // 9 - TAB\n  if (keyCode === 40 || keyCode === 38 || keyCode === 27 || keyCode === 13 || keyCode === 9) return;\n  this.handleInputChange(this.el.value);\n};\n\nSuggestions.prototype.handleKeyDown = function (e) {\n  switch (e.keyCode) {\n    case 13: // ENTER\n\n    case 9:\n      // TAB\n      if (!this.list.isEmpty()) {\n        if (this.list.isVisible()) {\n          e.preventDefault();\n        }\n\n        this.value(this.list.items[this.list.active].original);\n        this.list.hide();\n      }\n\n      break;\n\n    case 27:\n      // ESC\n      if (!this.list.isEmpty()) this.list.hide();\n      break;\n\n    case 38:\n      // UP\n      this.list.previous();\n      break;\n\n    case 40:\n      // DOWN\n      this.list.next();\n      break;\n  }\n};\n\nSuggestions.prototype.handleBlur = function () {\n  if (!this.list.selectingListItem && this.options.hideOnBlur) {\n    this.list.hide();\n  }\n};\n\nSuggestions.prototype.handlePaste = function (e) {\n  if (e.clipboardData) {\n    this.handleInputChange(e.clipboardData.getData('Text'));\n  } else {\n    var self = this;\n    setTimeout(function () {\n      self.handleInputChange(e.target.value);\n    }, 100);\n  }\n};\n\nSuggestions.prototype.handleInputChange = function (query) {\n  this.query = this.normalize(query);\n  this.list.clear();\n\n  if (this.query.length < this.options.minLength) {\n    this.list.draw();\n    return;\n  }\n\n  this.getCandidates(function (data) {\n    for (var i = 0; i < data.length; i++) {\n      this.list.add(data[i]);\n      if (i === this.options.limit - 1) break;\n    }\n\n    this.list.draw();\n  }.bind(this));\n};\n\nSuggestions.prototype.handleFocus = function () {\n  if (!this.list.isEmpty()) this.list.show();\n  this.list.selectingListItem = false;\n};\n/**\n * Update data previously passed\n *\n * @param {Array} revisedData\n */\n\n\nSuggestions.prototype.update = function (revisedData) {\n  this.data = revisedData;\n  this.handleKeyUp();\n};\n/**\n * Clears data\n */\n\n\nSuggestions.prototype.clear = function () {\n  this.data = [];\n  this.list.clear();\n};\n/**\n * Normalize the results list and input value for matching\n *\n * @param {String} value\n * @return {String}\n */\n\n\nSuggestions.prototype.normalize = function (value) {\n  value = value.toLowerCase();\n  return value;\n};\n/**\n * Evaluates whether an array item qualifies as a match with the current query\n *\n * @param {String} candidate a possible item from the array passed\n * @param {String} query the current query\n * @return {Boolean}\n */\n\n\nSuggestions.prototype.match = function (candidate, query) {\n  return candidate.indexOf(query) > -1;\n};\n\nSuggestions.prototype.value = function (value) {\n  this.selected = value;\n  this.el.value = this.getItemValue(value);\n\n  if (document.createEvent) {\n    var e = document.createEvent('HTMLEvents');\n    e.initEvent('change', true, false);\n    this.el.dispatchEvent(e);\n  } else {\n    this.el.fireEvent('onchange');\n  }\n};\n\nSuggestions.prototype.getCandidates = function (callback) {\n  var options = {\n    pre: '<strong>',\n    post: '</strong>',\n    extract: function (d) {\n      return this.getItemValue(d);\n    }.bind(this)\n  };\n  var results;\n\n  if (this.options.filter) {\n    results = fuzzy.filter(this.query, this.data, options);\n    results = results.map(function (item) {\n      return {\n        original: item.original,\n        string: this.render(item.original, item.string)\n      };\n    }.bind(this));\n  } else {\n    results = this.data.map(function (d) {\n      var renderedString = this.render(d);\n      return {\n        original: d,\n        string: renderedString\n      };\n    }.bind(this));\n  }\n\n  callback(results);\n};\n/**\n * For a given item in the data array, return what should be used as the candidate string\n *\n * @param {Object|String} item an item from the data array\n * @return {String} item\n */\n\n\nSuggestions.prototype.getItemValue = function (item) {\n  return item;\n};\n/**\n * For a given item in the data array, return a string of html that should be rendered in the dropdown\n * @param {Object|String} item an item from the data array\n * @param {String} sourceFormatting a string that has pre-formatted html that should be passed directly through the render function \n * @return {String} html\n */\n\n\nSuggestions.prototype.render = function (item, sourceFormatting) {\n  if (sourceFormatting) {\n    // use existing formatting on the source string\n    return sourceFormatting;\n  }\n\n  var boldString = item.original ? this.getItemValue(item.original) : this.getItemValue(item);\n  var indexString = this.normalize(boldString);\n  var indexOfQuery = indexString.lastIndexOf(this.query);\n\n  while (indexOfQuery > -1) {\n    var endIndexOfQuery = indexOfQuery + this.query.length;\n    boldString = boldString.slice(0, indexOfQuery) + '<strong>' + boldString.slice(indexOfQuery, endIndexOfQuery) + '</strong>' + boldString.slice(endIndexOfQuery);\n    indexOfQuery = indexString.slice(0, indexOfQuery).lastIndexOf(this.query);\n  }\n\n  return boldString;\n};\n/**\n * Render an custom error message in the suggestions list\n * @param {String} msg An html string to render as an error message\n */\n\n\nSuggestions.prototype.renderError = function (msg) {\n  this.list.drawError(msg);\n};\n\nmodule.exports = Suggestions;","map":null,"metadata":{},"sourceType":"script"}